// <auto-generated />
using System;
using Backpack.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backpack.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250709214748_AddProfile")]
    partial class AddProfile
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true);

            modelBuilder.Entity("Backpack.Domain.Entity.Backup", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<uint>("DestinationId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("SourceId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DestinationId");

                    b.HasIndex("SourceId");

                    b.ToTable("Backups");
                });

            modelBuilder.Entity("Backpack.Domain.Entity.Location", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("IgnoreWildcards")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Backpack.Domain.Entity.Profile", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("BackupProfile", b =>
                {
                    b.Property<uint>("BackupsId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("ProfilesId")
                        .HasColumnType("INTEGER");

                    b.HasKey("BackupsId", "ProfilesId");

                    b.HasIndex("ProfilesId");

                    b.ToTable("BackupProfile", (string)null);
                });

            modelBuilder.Entity("Backpack.Domain.Entity.Backup", b =>
                {
                    b.HasOne("Backpack.Domain.Entity.Location", "Destination")
                        .WithMany("DestinationBackups")
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backpack.Domain.Entity.Location", "Source")
                        .WithMany("SourceBackups")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Destination");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("BackupProfile", b =>
                {
                    b.HasOne("Backpack.Domain.Entity.Backup", null)
                        .WithMany()
                        .HasForeignKey("BackupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backpack.Domain.Entity.Profile", null)
                        .WithMany()
                        .HasForeignKey("ProfilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backpack.Domain.Entity.Location", b =>
                {
                    b.Navigation("DestinationBackups");

                    b.Navigation("SourceBackups");
                });
#pragma warning restore 612, 618
        }
    }
}
